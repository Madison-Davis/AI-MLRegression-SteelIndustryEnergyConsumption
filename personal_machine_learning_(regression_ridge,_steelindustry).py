# -*- coding: utf-8 -*-
"""Personal: Machine Learning (Regression: Ridge, SteelIndustry).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jmEayL89kT_FgHfS-1_FheB-sWqqhLb4
"""

# Regression of Steel Industry
# Highest Accuracy: 97%, Ridge Regression

# Installations
import csv
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.decomposition import PCA

# Data Manipulation
# Data Columns:
  # 0: Date Continuous-time data taken on the first of the month
  # 1: Usage_kWh Industry Energy Consumption Continuous kWh
  # 2: Lagging Current reactive power Continuous kVarh
  # 3: Leading Current reactive power Continuous kVarh
  # 4: CO2 Continuous ppm
  # 5: NSM Number of Seconds from midnight Continuous S
  # 6: Week status Categorical (Weekend (0) or a Weekday(1))
  # 7: Day of week Categorical Sunday, Monday : Saturday
  # 8: Load Type Categorical Light Load, Medium Load, Maximum Load

fileName = "//content//drive//MyDrive//Coding//Personal Projects//3: Machine Learning//Resources//SteelIndustryEnergyConsumption.csv"
data = pd.read_csv(fileName)

# Data Inspection
print(data.shape)
for row_name in data:
  print(row_name)

# Correlation / Determining Dependent Variable for Prediction (Answer = Usage kWH)
plt.figure(figsize = (10,10))
plt.title("Correlation")
sns.heatmap(data.corr(), annot = True, cmap = 'magma')
plt.show()

# PCA Analysis / Determine What Variables Most Affect Usage (kWH)
# Date does not matter, so get rid of it
# Lagging_Current_Reactive.Power_kVarh and Leading_Current_Reactive_Power_kVarh correlate, just not as much as others, but because correlation is high include them
pca = PCA()
x_pca = pca.fit_transform(x)
plt.figure(figsize=(10,10))
plt.plot(np.cumsum(pca.explained_variance_ratio_), 'ro-')
plt.grid()

# Data Setup
data = data.set_index('date')
data = pd.get_dummies(data, drop_first = True)
x = data.drop('Usage_kWh', axis = 1)
y = data['Usage_kWh']

# Training
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
model = Ridge(alpha = 0.5)
model.fit(x_train, y_train)
model.score(x_test, y_test)
accuracy = model.score(x_test, y_test)
accuracy = accuracy * 100
print("Accuracy:", accuracy, "%")